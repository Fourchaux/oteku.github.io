<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Oteku</title>
        <link>https%3A//oteku.github.io</link>
        <description>Je m&#x27;appelle Thomas Haesslé, j&#x27;écris quelques essais dans ce carnet sur #ReasonML #OCaml #Rust</description>
        <generator>Zola</generator>
        <language>fr</language>
        <atom:link href="https%3A//oteku.github.io/tags/reasonml/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Mon, 23 Mar 2020 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>ReasonML : Outillage d&#x27;un projet</title>
                <pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate>
                <link>https%3A//oteku.github.io/esy-reasonml/</link>
                <guid>https%3A//oteku.github.io/esy-reasonml/</guid>
                <description>&lt;p&gt;ReasonML natif dispose d&#x27;un outillage exceptionnel, grâce à l&#x27;ecosystème OCaml. Dans ce billet, je vous propose de créer depuis 0 un projet ReasonML natif. Nous parcourerons l&#x27;outillage de gestion de dépendance, de construction logicielle, de travail dans un bac à sable par projet.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>ReasonML : les modules</title>
                <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
                <link>https%3A//oteku.github.io/reasonml-modules/</link>
                <guid>https%3A//oteku.github.io/reasonml-modules/</guid>
                <description>&lt;p&gt;ReasonML intègre un système de &lt;strong&gt;programmation modulaire&lt;&#x2F;strong&gt;. Les modules offrent un mécanisme d&#x27;encapsulation et permettent d&#x27;organiser le code en unités logiques, en fournissant des espaces de noms (namespaces) utiles lors de leur utilisation. ReasonML propose un système de modules récursifs et paramétrables très puissant qui permet de fournir une grande généricité au code.&lt;&#x2F;p&gt;
&lt;p&gt;En ReasonML, tout le code est encapsulé dans des modules. Si nous plaçons l&#x27;ensemble du code du &lt;a href=&quot;..&#x2F;reasonml-adt&quot;&gt;premier billet&lt;&#x2F;a&gt; dans un fichier &lt;code&gt;Hero.re&lt;&#x2F;code&gt;, cela définit automatiquement un module &lt;code&gt;Hero&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>ReasonML : types de données algébriques</title>
                <pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate>
                <link>https%3A//oteku.github.io/reasonml-adt/</link>
                <guid>https%3A//oteku.github.io/reasonml-adt/</guid>
                <description>&lt;p&gt;Les &lt;strong&gt;types de données algébriques&lt;&#x2F;strong&gt;, en anglais &lt;strong&gt;algebraic data types&lt;&#x2F;strong&gt; ou &lt;strong&gt;ADT&lt;&#x2F;strong&gt;, sont une classe de types de données composites, c&#x27;est à dire de nouveaux types créés dans un langage de programmation à partir de primitives de types.&lt;&#x2F;p&gt;
&lt;p&gt;On distingue principalement 4 types d&#x27;ADT issus de la théorie des catégories : les types sommes, les types produits, les types exponentiels et les type récursifs. ReasonML permet de définir de nouveaux types permettat de modéliser les ADT, nous allons voir comment et leur intérêt.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>ReasonML : la série</title>
                <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
                <link>https%3A//oteku.github.io/reasonml-serie/</link>
                <guid>https%3A//oteku.github.io/reasonml-serie/</guid>
                <description>&lt;p&gt;Je me lance dans l&#x27;exercice de la série d&#x27;article. Pour commencer, je souhaite partager avec vous un langage et un ecosytème qui me passionne depuis 3 ans &lt;strong&gt;ReasonML&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Si vous ne connaissez pas encore ce langage, il s&#x27;agit d&#x27;une syntaxe de &lt;strong&gt;OCaml&lt;&#x2F;strong&gt; développée au sein de Facebook par &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;jordwalke&quot;&gt;Jordan Walke&lt;&#x2F;a&gt;, le &lt;em&gt;papa&lt;&#x2F;em&gt; de ReactJS. Facebook n&#x27;en est pas à ses début avec l&#x27;écosystème OCaml puisque ce dernier a notament servi à réaliser le prototype de react avant de passer sur Javascript pour des raisons &lt;em&gt;marketing&lt;&#x2F;em&gt;, à réaliser la machine virtuelle PHP&#x2F;Hack &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;hhvm&#x2F;tree&#x2F;master&#x2F;hphp&#x2F;hack&quot;&gt;HHVM&lt;&#x2F;a&gt; ou encore à réaliser le typechecker javascript &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;flow&quot;&gt;Flow&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
            </item>
        
    </channel>
</rss>
