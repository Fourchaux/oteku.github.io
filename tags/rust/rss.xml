<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Les carnets d&#x27;Oteku</title>
        <link>https://oteku.github.io</link>
        <description>Je m&#x27;appelle Thomas Haesslé, j&#x27;écris quelques essais dans ce carnet sur #ReasonML #OCaml #Rust</description>
        <generator>Zola</generator>
        <language>fr</language>
        <atom:link href="https://oteku.github.io/tags/rust/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Fri, 29 Mar 2019 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>Opérateur pipe en Rust ?</title>
                <pubDate>Fri, 29 Mar 2019 00:00:00 +0000</pubDate>
                <link>https://oteku.github.io/pipe-macro-rust/</link>
                <guid>https://oteku.github.io/pipe-macro-rust/</guid>
                <description>&lt;p&gt;L&#x27;absence d&#x27;opérateur de composition, similaire au &lt;code&gt;.&lt;&#x2f;code&gt; de Haskell, ou de pipeline similaire au &lt;code&gt;|&amp;gt;&lt;&#x2f;code&gt; de ReasonML et OCaml, est assez frustrante lors qu&#x27;on essait de faire du code Rust déclaratif.&lt;&#x2f;p&gt;
&lt;p&gt;Il est possible d&#x27;envisager la &lt;em&gt;dot notation&lt;&#x2f;em&gt; mais d&#x27;une part ce n&#x27;est pas totalement satisfaisant et d&#x27;autre part cela nécessite d&#x27;implémenter des traits pour chacun des types de données qui composent le flux de traitement.&lt;&#x2f;p&gt;
&lt;p&gt;Heureusement la programmation générique et les macros de &lt;strong&gt;Rust&lt;&#x2f;strong&gt; peuvent nous aider à implémenter la composition assez facilement :&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#212733;&quot;&gt;
&lt;span style=&quot;color:#ccc9c2;&quot;&gt;
&lt;&#x2f;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2f;&#x2f; function used to compose
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;compose_two&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;&amp;lt;A, B, C, G, F&amp;gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;f&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; F, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;g&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; G) &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;-&amp;gt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; impl FnOnce(A) &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;-&amp;gt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; C
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;where&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;
    F&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; FnOnce(A) -&amp;gt; B,
    G&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; FnOnce(B) -&amp;gt; C,
{
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;move &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;|&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;x&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;| &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;g&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;f&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(x))
}

&lt;&#x2f;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2f;&#x2f; composition macro
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;macro_rules! &lt;&#x2f;span&gt;&lt;span style=&quot;color:#73d0ff;&quot;&gt;compose &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;{
    ( &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;$last&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;expr &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;) &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;=&amp;gt; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;{ $last };
    ( &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;$head&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;expr&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;$&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;($tail:expr), +) =&amp;gt; {
        compose_two($head, compose!($($tail),&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;+&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;))
    };
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Maintenant on peut composer des fonctions ainsi :&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#212733;&quot;&gt;
&lt;span style=&quot;color:#ffa759;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;main&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;() {
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;let &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;double &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;|&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;x&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;| x &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;* &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;2&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;let &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;add2 &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;|&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;x&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;| x &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;+ &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;2&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;let&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; double_then_add2 &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;compose!&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(double&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;,&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; add2)&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;println!&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#bae67e;&quot;&gt;&amp;quot;Result is &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;{}&lt;&#x2f;span&gt;&lt;span style=&quot;color:#bae67e;&quot;&gt;&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;double_then_add2&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;10&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;))&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Grâce à notre macro &lt;code&gt;compose!&lt;&#x2f;code&gt;, nous pouvons également créer une nouvelle macro &lt;code&gt;pipe!&lt;&#x2f;code&gt; :&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#212733;&quot;&gt;
&lt;span style=&quot;color:#ccc9c2;&quot;&gt;
&lt;&#x2f;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2f;&#x2f; function needed to infer type
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;pipe_two&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;&amp;lt;A, B, F&amp;gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;a &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; A, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;f&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; F) &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;-&amp;gt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; B
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;where&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;
    F&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; FnOnce(A) -&amp;gt; B,
{
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;f&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(a)
}

&lt;&#x2f;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2f;&#x2f; pipe macro
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;macro_rules! &lt;&#x2f;span&gt;&lt;span style=&quot;color:#73d0ff;&quot;&gt;pipe &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;{
    ( &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;$last&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;expr &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;) &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;=&amp;gt; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;{ $last };
    ( &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;$head&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;expr&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;$&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;($tail:expr), +) =&amp;gt; {
        pipe_two($head, compose!($($tail),&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;+&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;))
    };
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Dorenavant nous pouvons directement pipeliner nos fonctions ainsi :&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#212733;&quot;&gt;
&lt;span style=&quot;color:#ffa759;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;main&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;() {
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;let &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;double &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;|&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;x&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;| x &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;* &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;2&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;let &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;add2 &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;|&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;x&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;| x &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;+ &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;2&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;println!&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#bae67e;&quot;&gt;&amp;quot;Result is &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;{}&lt;&#x2f;span&gt;&lt;span style=&quot;color:#bae67e;&quot;&gt;&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;pipe!&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;double&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;10&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;)&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;,&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; add2))&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;println!&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#bae67e;&quot;&gt;&amp;quot;Result is &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;{}&lt;&#x2f;span&gt;&lt;span style=&quot;color:#bae67e;&quot;&gt;&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;pipe!&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;10&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;,&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; double&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;,&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; add2))&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Implémenter un opérateur infixe est un peu plus complexe parce que Rust limite les opérateurs surchargeables à certains opérateurs via le module &lt;a href=&quot;https:&#x2f;&#x2f;doc.rust-lang.org&#x2f;std&#x2f;ops&#x2f;index.html&quot;&gt;std::ops&lt;&#x2f;a&gt;, malheureusement &lt;code&gt;|&amp;gt;&lt;&#x2f;code&gt; n&#x27;en fait pas parti, cependant il est possible d&#x27;utiliser &lt;code&gt;|&lt;&#x2f;code&gt; ce qui nous rappelera le pipelining Linux.&lt;&#x2f;p&gt;
&lt;p&gt;Un autre point à prendre en compte est que nous avons besoin d&#x27;un type pour encapsuler nos données, si on veut éviter d&#x27;implémenter le trait &lt;a href=&quot;https:&#x2f;&#x2f;doc.rust-lang.org&#x2f;std&#x2f;ops&#x2f;trait.BitOr.html&quot;&gt;BitOr&lt;&#x2f;a&gt; pour chaque type initiant un pipelining.&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#212733;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2f;&#x2f; Need a wrapper to implement pipe operator
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;struct &lt;&#x2f;span&gt;&lt;span style=&quot;color:#73d0ff;&quot;&gt;Scalar&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;&amp;lt;T&amp;gt;(T)&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;

&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;use &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;std&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;::&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;ops&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;::&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;BitOr&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;impl&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;&amp;lt;A, B, F&amp;gt; BitOr&amp;lt;F&amp;gt; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;for &lt;&#x2f;span&gt;&lt;span style=&quot;color:#73d0ff;&quot;&gt;Scalar&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;&amp;lt;A&amp;gt;
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;where&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; F&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; FnOnce(A) -&amp;gt; B
{
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;type &lt;&#x2f;span&gt;&lt;span style=&quot;color:#73d0ff;&quot;&gt;Output &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;Scalar&amp;lt;B&amp;gt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;

    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;bitor&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;f&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; F) &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;-&amp;gt; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;Scalar&amp;lt;B&amp;gt; {
        Scalar(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;f&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;font-style:italic;color:#5ccfe6;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;.&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;0&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;))
    }
}

&lt;&#x2f;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2f;&#x2f; Need an unwrapping function
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;impl&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;&amp;lt;T&amp;gt; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#73d0ff;&quot;&gt;Scalar&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;&amp;lt;T&amp;gt; {
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;unwrap&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;) &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;-&amp;gt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; T{
        &lt;&#x2f;span&gt;&lt;span style=&quot;font-style:italic;color:#5ccfe6;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;.&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;0
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;}
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Ce qui nous permet enfin d&#x27;écrire :&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#212733;&quot;&gt;
&lt;span style=&quot;color:#ffa759;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;main&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;() {
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;let &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;double &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;|&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;x&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;| x &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;* &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;2&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;let &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;add2 &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;|&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;x&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;| x &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;+ &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;2&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;println!&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#bae67e;&quot;&gt;&amp;quot;Result is &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;{}&lt;&#x2f;span&gt;&lt;span style=&quot;color:#bae67e;&quot;&gt;&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(Scalar(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;10&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;) &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;|&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; double &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;|&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; add2)&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;.&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;unwrap&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;())&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;On peut donc conclure qu&#x27;avec peu de code boilerplate, il est relativement aisé de composer des fonctions en Rust. Pour ma part, je trouve qu&#x27;implémenter l&#x27;opérateur infixe amène une complexité supplémentaire, à cause de la nécessité de mettre en place les &lt;em&gt;wrapping&lt;&#x2f;em&gt; et &lt;em&gt;unwrapping&lt;&#x2f;em&gt;, c&#x27;est pourquoi je préfère utiliser les macros dans mon code.&lt;&#x2f;p&gt;
</description>
            </item>
        
    </channel>
</rss>
