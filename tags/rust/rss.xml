<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Les carnets d&#x27;Oteku</title>
        <link>https://oteku.github.io</link>
        <description>Je m&#x27;appelle Thomas Haesslé, j&#x27;écris quelques essais dans ce carnet sur #ReasonML #OCaml #Rust</description>
        <generator>Zola</generator>
        <language>fr</language>
        <atom:link href="https://oteku.github.io/tags/rust/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Thu, 20 Jun 2019 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>Rust my Node.js</title>
                <pubDate>Thu, 20 Jun 2019 00:00:00 +0000</pubDate>
                <link>https://oteku.github.io/rust-my-node/</link>
                <guid>https://oteku.github.io/rust-my-node/</guid>
                <description>&lt;p&gt;Si vous êtes développeur Node.js, vous vous confronterez tôt ou tard au développement d&#x27;addons natifs ... et à tout un lot de nouveaux problèmes : le langage C++ en lui même, mais également API V8, build system ou dépendance aux versions de V8. Pourtant dès que vous avez besoins de multi-threading, d&#x27;accès aux ressources machine ou même simplement pour réutiliser des librairies existantes vous n&#x27;y coupez pas. Ce billet vise à vous faire découvrir comment le langage Rust permet de rendre vos modules natifs &amp;quot;fast &amp;amp; safe&amp;quot;.&lt;&#x2f;p&gt;
&lt;h2 id=&quot;une-histoire-de-node&quot;&gt;Une histoire de Node&lt;&#x2f;h2&gt;
&lt;p&gt;J&#x27;aime beaucoup le runtime &lt;a href=&quot;https:&#x2f;&#x2f;nodejs.org&quot;&gt;Node.js&lt;&#x2f;a&gt; :&lt;&#x2f;p&gt;
&lt;ul&gt;
&lt;li&gt;un écosystème impressionnant grâce à &lt;a href=&quot;https:&#x2f;&#x2f;www.npmjs.com&#x2f;&quot;&gt;npm&lt;&#x2f;a&gt;, qui se trouve être un excellent outil de gestion de dépendance, de sandboxing de projet et de publication de librairie ;&lt;&#x2f;li&gt;
&lt;li&gt;la communauté javascript est très prolifique, ce qui permet également de trouver beaucoup de librairies intéressante via npm ;&lt;&#x2f;li&gt;
&lt;li&gt;le runtime est très performant pour créer des API web et de manière générale, pour tout cas d&#x27;usage consommateur d&#x27;I&#x2f;O ;&lt;&#x2f;li&gt;
&lt;li&gt;le modèle de gestion de l&#x27;asynchronisme proposé par l&#x27;event-loop, mimant la webAPI JS, est également une force.&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
&lt;p&gt;Tout ceci est supporté par une architecture robuste, rendue possible principalement grâce au moteur ECMAScript &lt;a href=&quot;https:&#x2f;&#x2f;v8.dev&#x2f;&quot;&gt;V8&lt;&#x2f;a&gt; et la librairie &lt;a href=&quot;http:&#x2f;&#x2f;libuv.org&#x2f;&quot;&gt;libuv&lt;&#x2f;a&gt;.&lt;&#x2f;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2f;img&#x2f;node.png&quot; alt=&quot;Node.js architecture&quot; &#x2f;&gt;&lt;&#x2f;p&gt;
&lt;p&gt;Node.js est donc un runtime C&#x2f;C++ qui exécute du code Javascript. Cependant Javascript est un langage conçu initialement pour être exécuté dans un navigateur web. Pour des raisons de sécurité un certain nombre d&#x27;actions ne sont pas possible depuis un navigateur et de fait ne font pas parties des spécifications et API javascript. Par exemple l&#x27;accès direct au système de fichier ou aux périhériques réseaux ...&lt;&#x2f;p&gt;
&lt;p&gt;Node.js fournit donc une &lt;a href=&quot;https:&#x2f;&#x2f;nodejs.org&#x2f;dist&#x2f;latest-v12.x&#x2f;docs&#x2f;api&#x2f;&quot;&gt;API&lt;&#x2f;a&gt; permettant d&#x27;accéder à certaines des ces fonctionnalités pour réaliser de réelles applications serveur en Javascipt. En réalité, ces modules sont des programmes C++ qui expose des bindings Javascript grâce à l&#x27;API de V8. Ceci est &amp;quot;masqué&amp;quot; par Node.js quand vous utilisez des modules tels que &lt;code&gt;fs&lt;&#x2f;code&gt; ou &lt;code&gt;net&lt;&#x2f;code&gt;. Cepedant cette API ne pouvant être exhaustive, et pour ouvrir le champ des possibles, Node.js permet également de faire des addons C++ et d&#x27;exposer vos propres bindings.&lt;&#x2f;p&gt;
&lt;p&gt;Lorsque l&#x27;on développe une application pour Node.js nous pouvons donc faire du code Javascript ou du code C++ packagé sous forme d&#x27;addon.&lt;&#x2f;p&gt;
&lt;h2 id=&quot;que-sont-ces-addons&quot;&gt;Que sont ces addons ?&lt;&#x2f;h2&gt;
&lt;ul&gt;
&lt;li&gt;Des « dynamically-linked shared objects », écrits en C++, en utilisant l’api V8 api, qui peuvent être importé par la fonction &lt;code&gt;require()&lt;&#x2f;code&gt; ;&lt;&#x2f;li&gt;
&lt;li&gt;des modules compilés dépendant de V8 et donc dépendants de la version de Node et de l&#x27;architecture du processeur.&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
&lt;p&gt;Depuis Node 8, il existe &lt;a href=&quot;https:&#x2f;&#x2f;nodejs.org&#x2f;dist&#x2f;latest-v12.x&#x2f;docs&#x2f;api&#x2f;n-api.html&quot;&gt;n-api&lt;&#x2f;a&gt;, une abstraction indépendante de la version de V8.&lt;&#x2f;p&gt;
&lt;p&gt;Un addon doit donc être compilé pour chaque version de Node et chaque architecture. En général, il suffit de prévoir le build de l&#x27;addon dans le script npm &lt;code&gt;postinstall&lt;&#x2f;code&gt; de son projet.&lt;&#x2f;p&gt;
&lt;h2 id=&quot;a-quoi-ca-sert&quot;&gt;A quoi ça sert ?&lt;&#x2f;h2&gt;
&lt;ul&gt;
&lt;li&gt;Réutiliser du code C ou C++ existant dans votre base de code d&#x27;entreprise ;&lt;&#x2f;li&gt;
&lt;li&gt;utiliser des librairies binaires : statiques (.a) ou dynamiques (.so &#x2f; .dylib &#x2f; .dll), potentiellement des librairies tierces non libres ;&lt;&#x2f;li&gt;
&lt;li&gt;viser des performances natives, ce qui peut être intéressant pour certains algorithmes ;&lt;&#x2f;li&gt;
&lt;li&gt;avoir accès aux ressources systèmes, non accessibles depuis Javascript (I&#x2f;O, ports séries, GPU …) ;&lt;&#x2f;li&gt;
&lt;li&gt;utiliser des worker threads pour des algorithmes plus intéressants en multi-threading (il est possible, depuis Node 10.5, de faire du multi-threading en Javascript, mais cela reste expérimental et limité) ;&lt;&#x2f;li&gt;
&lt;li&gt;typer statiquement une librairie.&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
&lt;h2 id=&quot;les-anti-patterns&quot;&gt;Les anti-patterns&lt;&#x2f;h2&gt;
&lt;p&gt;A ce stade, on pourrait être tenter de réaliser toute son application sous forme d&#x27;addon ! Ce n&#x27;est pas le but et il y a quelques anti-patterns à connaitre :&lt;&#x2f;p&gt;
&lt;ul&gt;
&lt;li&gt;vouloir ré-écrire l&#x27;event-loop : Node a été conçu pour ça, libuv est &amp;quot;battle tested&amp;quot; ;&lt;&#x2f;li&gt;
&lt;li&gt;faire des I&#x2f;O intensif : là encore, c&#x27;est la force de libuv ;&lt;&#x2f;li&gt;
&lt;li&gt;uniquement typer un programme : si le côté dynamique de Javascript vous dérange, d&#x27;autres approches sont plus productives :
&lt;ul&gt;
&lt;li&gt;Js as a Bytecode : avoir un langage typé statiquement qui compile vers Javascript, tel que OCaml + Js_of_ocaml, F# + Fable, ou Purescript. Ces compilateurs apportent beaucoup d&#x27;optimisations et ces langages sont plus sûrs que C++ ;&lt;&#x2f;li&gt;
&lt;li&gt;Webassembly : quand vous êtes dans un langage ne disposant pas d&#x27;un bon compilateur vers JS mais disposant d&#x27;un compilateur WASM (ex : Rust). C&#x27;est d&#x27;ailleurs l&#x27;objectif de WASM, servir d&#x27;assembleur pour le web et d&#x27;éviter le passage par JS. De plus Node.js peut tout à fait charger un module WASM.&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
&lt;p&gt;&lt;strong&gt;Donc je peux utiliser Javascript et C++ en même temps&lt;&#x2f;strong&gt;
&lt;img src=&quot;..&#x2f;img&#x2f;large.png&quot; alt=&quot;Large amount of code&quot; &#x2f;&gt;&lt;&#x2f;p&gt;
&lt;p&gt;C++ est un langage qui cumule beaucoup de problématiques : unsound, unsafe, manque d&#x27;outillage ...
Néanmoins c&#x27;est un langage parfois utile pour faire des programmes &lt;em&gt;bas niveau&lt;&#x2f;em&gt; performant.&lt;&#x2f;p&gt;
&lt;p&gt;A titre personnel, j&#x27;utilise &lt;a href=&quot;https:&#x2f;&#x2f;www.rust-lang.org&#x2f;&quot;&gt;Rust&lt;&#x2f;a&gt; pour ce type de besoins. Les avantages de Rust, de manière synthétique sont :&lt;&#x2f;p&gt;
&lt;ul&gt;
&lt;li&gt;un langage &lt;em&gt;Memory Safe&lt;&#x2f;em&gt; ;&lt;&#x2f;li&gt;
&lt;li&gt;un compilateur qui bloque la plupart des erreurs de runtime ;&lt;&#x2f;li&gt;
&lt;li&gt;un interfaçage facile avec C&#x2f;C++ ;&lt;&#x2f;li&gt;
&lt;li&gt;la programmation générique ;&lt;&#x2f;li&gt;
&lt;li&gt;un système de &lt;em&gt;type ML&lt;&#x2f;em&gt;, incluant types algébriques et filtrage par motifs ;&lt;&#x2f;li&gt;
&lt;li&gt;pas de &lt;em&gt;rammasse miette&lt;&#x2f;em&gt; ;&lt;&#x2f;li&gt;
&lt;li&gt;pas d&#x27;allocation &#x2f; désallocation manuelle de mémoire ;&lt;&#x2f;li&gt;
&lt;li&gt;pas de &lt;em&gt;segmentation fault&lt;&#x2f;em&gt; ;&lt;&#x2f;li&gt;
&lt;li&gt;pas de &lt;em&gt;data race&lt;&#x2f;em&gt; ;&lt;&#x2f;li&gt;
&lt;li&gt;un outillage impressionant ;&lt;&#x2f;li&gt;
&lt;li&gt;compile vers des applications natives, des librairie Rust ou C, du webassembly ou même des addon Node.js&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
&lt;p&gt;Effectivement, le projet &lt;a href=&quot;https:&#x2f;&#x2f;neon-bindings.com&#x2f;&quot;&gt;Neon Bindings&lt;&#x2f;a&gt; permet de compiler une librairie Rust vers un addon natif Node et de l&#x27;utiliser directement depuis votre code Javascript.&lt;&#x2f;p&gt;
&lt;p&gt;Vous pouvez découvrir &lt;strong&gt;Neon&lt;&#x2f;strong&gt; avec ces quelques exemples : https:&#x2f;&#x2f;github.com&#x2f;oteku&#x2f;rust-my-node&lt;&#x2f;p&gt;
&lt;ul&gt;
&lt;li&gt;fibo-sync : comparer les performances d&#x27;un calcul &lt;em&gt;couteux&lt;&#x2f;em&gt; (ici un fibonacci naïf) en Javascript et Rust ;
&lt;ul&gt;
&lt;li&gt;Sur des &lt;em&gt;petits calculs&lt;&#x2f;em&gt; (&lt;code&gt;node fibo-sync.js --value 1&lt;&#x2f;code&gt;), Javascript est plus performant : c&#x27;est assez logique nous sommes dans le cas où le &lt;em&gt;coût&lt;&#x2f;em&gt; d&#x27;appel d&#x27;un addon est supérieur au coût du calcul ;&lt;&#x2f;li&gt;
&lt;li&gt;sur de &lt;em&gt;gros calculs&lt;&#x2f;em&gt; (&lt;code&gt;node fibo-sync.js --value 45&lt;&#x2f;code&gt;), on a un gain notable ;&lt;&#x2f;li&gt;
&lt;li&gt;il est aisé, grace au type &lt;code&gt;JsResult&lt;&#x2f;code&gt; de Neon, de passer des erreurs du code Rust au code Javascript (&lt;code&gt;node fibo-sync.js --value 50&lt;&#x2f;code&gt;) ;&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
&lt;&#x2f;li&gt;
&lt;li&gt;fibo-async : dans un programme Node.js, on prend l&#x27;habitude découper un algorithme couteux en code asynchrone pour ne pas bloquer l&#x27;event loop. Neon offre un trait &lt;code&gt;Task&lt;&#x2f;code&gt; qui permet faciliter la création de code asynchrone dans vos addons et de ne pas bloquer la callstack JS (&lt;code&gt;node fibo-async.js --value 45&lt;&#x2f;code&gt;) ;&lt;&#x2f;li&gt;
&lt;li&gt;foldersize : sert à montrer comment un addon permet de bénéficier de librairies Rust existantes pour les réutiliser au sein d&#x27;un programme Node (&lt;code&gt;node foldersize.js&lt;&#x2f;code&gt;)&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
&lt;p&gt;&lt;em&gt;Ce billet a été rédigé pour servir de pilote au talk Rust my node présenté lors de &lt;a href=&quot;https:&#x2f;&#x2f;www.meetup.com&#x2f;fr-FR&#x2f;LambdaLille&#x2f;events&#x2f;260541114&#x2f;&quot;&gt;Lambda Lille#14&lt;&#x2f;a&gt; et d&#x27;un &lt;a href=&quot;https:&#x2f;&#x2f;www.meetup.com&#x2f;fr-FR&#x2f;NightClazz-Lille-by-Zenika&#x2f;events&#x2f;262219651&quot;&gt;BBL Zenika&lt;&#x2f;a&gt;&lt;&#x2f;em&gt;&lt;&#x2f;p&gt;
</description>
            </item>
        
            <item>
                <title>Opérateur pipe en Rust ?</title>
                <pubDate>Fri, 29 Mar 2019 00:00:00 +0000</pubDate>
                <link>https://oteku.github.io/pipe-macro-rust/</link>
                <guid>https://oteku.github.io/pipe-macro-rust/</guid>
                <description>&lt;p&gt;L&#x27;absence d&#x27;opérateur de composition, similaire au &lt;code&gt;.&lt;&#x2f;code&gt; de Haskell, ou de pipeline similaire au &lt;code&gt;|&amp;gt;&lt;&#x2f;code&gt; de ReasonML et OCaml, est assez frustrante lors qu&#x27;on essaie de faire du code Rust déclaratif.&lt;&#x2f;p&gt;
&lt;p&gt;Il est possible d&#x27;envisager la &lt;em&gt;dot notation&lt;&#x2f;em&gt; mais, d&#x27;une part ce n&#x27;est pas totalement satisfaisant et, d&#x27;autre part cela nécessite d&#x27;implémenter des traits pour chacun des types de données qui composent le flux de traitement.&lt;&#x2f;p&gt;
&lt;p&gt;Heureusement la programmation générique et les macros de &lt;strong&gt;Rust&lt;&#x2f;strong&gt; peuvent nous aider à implémenter la composition assez facilement :&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#212733;&quot;&gt;
&lt;span style=&quot;color:#ccc9c2;&quot;&gt;
&lt;&#x2f;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2f;&#x2f; function used to compose
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;compose_two&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;&amp;lt;A, B, C, G, F&amp;gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;f&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; F, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;g&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; G) &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;-&amp;gt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; impl FnOnce(A) &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;-&amp;gt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; C
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;where&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;
    F&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; FnOnce(A) -&amp;gt; B,
    G&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; FnOnce(B) -&amp;gt; C,
{
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;move &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;|&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;x&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;| &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;g&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;f&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(x))
}

&lt;&#x2f;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2f;&#x2f; composition macro
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;macro_rules! &lt;&#x2f;span&gt;&lt;span style=&quot;color:#73d0ff;&quot;&gt;compose &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;{
    ( &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;$last&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;expr &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;) &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;=&amp;gt; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;{ $last };
    ( &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;$head&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;expr&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;$&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;($tail:expr), +) =&amp;gt; {
        compose_two($head, compose!($($tail),&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;+&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;))
    };
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Maintenant on peut composer des fonctions ainsi :&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#212733;&quot;&gt;
&lt;span style=&quot;color:#ffa759;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;main&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;() {
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;let &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;double &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;|&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;x&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;| x &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;* &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;2&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;let &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;add2 &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;|&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;x&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;| x &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;+ &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;2&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;let&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; double_then_add2 &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;compose!&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(double&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;,&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; add2)&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;println!&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#bae67e;&quot;&gt;&amp;quot;Result is &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;{}&lt;&#x2f;span&gt;&lt;span style=&quot;color:#bae67e;&quot;&gt;&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;double_then_add2&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;10&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;))&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Grâce à notre macro &lt;code&gt;compose!&lt;&#x2f;code&gt;, nous pouvons également créer une nouvelle macro &lt;code&gt;pipe!&lt;&#x2f;code&gt; :&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#212733;&quot;&gt;
&lt;span style=&quot;color:#ccc9c2;&quot;&gt;
&lt;&#x2f;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2f;&#x2f; function needed to infer type
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;pipe_two&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;&amp;lt;A, B, F&amp;gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;a &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; A, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;f&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; F) &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;-&amp;gt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; B
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;where&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;
    F&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; FnOnce(A) -&amp;gt; B,
{
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;f&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(a)
}

&lt;&#x2f;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2f;&#x2f; pipe macro
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;macro_rules! &lt;&#x2f;span&gt;&lt;span style=&quot;color:#73d0ff;&quot;&gt;pipe &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;{
    ( &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;$last&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;expr &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;) &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;=&amp;gt; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;{ $last };
    ( &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;$head&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;expr&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;$&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;($tail:expr), +) =&amp;gt; {
        pipe_two($head, compose!($($tail),&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;+&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;))
    };
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Dorénavant, nous pouvons directement pipeliner nos fonctions ainsi :&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#212733;&quot;&gt;
&lt;span style=&quot;color:#ffa759;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;main&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;() {
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;let &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;double &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;|&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;x&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;| x &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;* &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;2&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;let &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;add2 &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;|&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;x&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;| x &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;+ &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;2&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;println!&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#bae67e;&quot;&gt;&amp;quot;Result is &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;{}&lt;&#x2f;span&gt;&lt;span style=&quot;color:#bae67e;&quot;&gt;&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;pipe!&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;double&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;10&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;)&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;,&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; add2))&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;println!&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#bae67e;&quot;&gt;&amp;quot;Result is &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;{}&lt;&#x2f;span&gt;&lt;span style=&quot;color:#bae67e;&quot;&gt;&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;pipe!&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;10&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;,&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; double&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;,&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; add2))&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Implémenter un opérateur infixe est un peu plus complexe parce que Rust limite les opérateurs surchargeables à certains opérateurs via le module &lt;a href=&quot;https:&#x2f;&#x2f;doc.rust-lang.org&#x2f;std&#x2f;ops&#x2f;index.html&quot;&gt;std::ops&lt;&#x2f;a&gt;, malheureusement &lt;code&gt;|&amp;gt;&lt;&#x2f;code&gt; n&#x27;en fait pas partie. Cependant, il est possible d&#x27;utiliser &lt;code&gt;|&lt;&#x2f;code&gt;, ce qui nous rappelera le pipelining Linux.&lt;&#x2f;p&gt;
&lt;p&gt;Un autre point à prendre en compte est que nous avons besoin d&#x27;un type pour encapsuler nos données, si on veut éviter d&#x27;implémenter le trait &lt;a href=&quot;https:&#x2f;&#x2f;doc.rust-lang.org&#x2f;std&#x2f;ops&#x2f;trait.BitOr.html&quot;&gt;BitOr&lt;&#x2f;a&gt; pour chaque type initiant un pipelining.&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#212733;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2f;&#x2f; Need a wrapper to implement pipe operator
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;struct &lt;&#x2f;span&gt;&lt;span style=&quot;color:#73d0ff;&quot;&gt;Scalar&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;&amp;lt;T&amp;gt;(T)&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;

&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;use &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;std&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;::&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;ops&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;::&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;BitOr&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;impl&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;&amp;lt;A, B, F&amp;gt; BitOr&amp;lt;F&amp;gt; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;for &lt;&#x2f;span&gt;&lt;span style=&quot;color:#73d0ff;&quot;&gt;Scalar&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;&amp;lt;A&amp;gt;
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;where&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; F&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; FnOnce(A) -&amp;gt; B
{
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;type &lt;&#x2f;span&gt;&lt;span style=&quot;color:#73d0ff;&quot;&gt;Output &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;Scalar&amp;lt;B&amp;gt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;

    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;bitor&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;f&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;:&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; F) &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;-&amp;gt; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;Scalar&amp;lt;B&amp;gt; {
        Scalar(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;f&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;font-style:italic;color:#5ccfe6;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;.&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;0&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;))
    }
}

&lt;&#x2f;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2f;&#x2f; Need an unwrapping function
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;impl&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;&amp;lt;T&amp;gt; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#73d0ff;&quot;&gt;Scalar&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;&amp;lt;T&amp;gt; {
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;unwrap&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;) &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;-&amp;gt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; T{
        &lt;&#x2f;span&gt;&lt;span style=&quot;font-style:italic;color:#5ccfe6;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;.&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;0
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;}
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Ce qui nous permet enfin d&#x27;écrire :&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#212733;&quot;&gt;
&lt;span style=&quot;color:#ffa759;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;main&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;() {
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;let &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;double &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;|&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;x&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;| x &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;* &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;2&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;let &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;add2 &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;|&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;x&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;| x &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;+ &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;2&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;println!&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#bae67e;&quot;&gt;&amp;quot;Result is &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;{}&lt;&#x2f;span&gt;&lt;span style=&quot;color:#bae67e;&quot;&gt;&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;(Scalar(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ffcc66;&quot;&gt;10&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;) &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;|&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; double &lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;|&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt; add2)&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;.&lt;&#x2f;span&gt;&lt;span style=&quot;color:#f28779;&quot;&gt;unwrap&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;())&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;;
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#ccc9c2;&quot;&gt;}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;On peut donc conclure qu&#x27;avec peu de boilerplate, il est relativement aisé de composer des fonctions en Rust. Pour ma part, je trouve qu&#x27;implémenter l&#x27;opérateur infixe amène une complexité supplémentaire, à cause de la nécessité de mettre en place les &lt;em&gt;wrapping&lt;&#x2f;em&gt; et &lt;em&gt;unwrapping&lt;&#x2f;em&gt;, c&#x27;est pourquoi je préfère utiliser les macros dans mon code.&lt;&#x2f;p&gt;
</description>
            </item>
        
    </channel>
</rss>
